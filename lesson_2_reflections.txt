What happens when you initialize a repository? Why do you need to do it?
    When a repository is initialized with the <git init> command, a special .git
    directory is created. This essential directory will be used to store data and
    track commits.


How is the staging area different from the working directory and the repository?
What value do you think it offers?
    The working directory contains all files for a project, whereas the staging
    area only contains files that the user has selected to be added to the next
    commit. This allows the user to exclude specific files from being added to the
    repository.


How can you use the staging area to make sure you have one commit per logical
change?
    You can use the command <git diff --staged> to compare the code in the staging
    area to the last commit. You can then review the changes to make sure only 1
    logical change is taking place in the files you have in the staging area.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    Branches could be used to implement new experimental code. A new branch
    diverges from the master branch and any changes added will not affect the
    original master.

    This feature would also prove useful when multiple authors are collaborating
    on a project together. Each person can work on a different portion of the
    project with their own fork of the master branch. One person's changes or
    additions will not affect another. Branches can later be merged to a single
    commit that encapsulates code from each author.


How do the diagrams help you visualize the branch structure?
    The diagrams show the relationships between commits and also identify the
    parent commit for each branch.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    When you merge two branches together, the new code and commit logs are combined
    into a single commit. The diagram helps to visualize which branch's commits
    will be combined together.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
    Git's automatic merging generally provides a quick and efficient solution to
    merge branches together. However, problems arise when the same lines of code
    have been modified within different branches.

    Git has no way to identify which parts of the code to keep. This can be resolved
    by using manual merges where the author chooses which lines of code to commit
    to the merge. While accurate, manual merges are a slower process than automatic
    merging.